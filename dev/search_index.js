var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = GeometricEquations","category":"page"},{"location":"#GeometricEquations","page":"Home","title":"GeometricEquations","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for GeometricEquations.","category":"page"},{"location":"","page":"Home","title":"Home","text":"In GeometricEquations.jl we define three basic types of equations:","category":"page"},{"location":"","page":"Home","title":"Home","text":"ordinary differential equations (ODEs),\ndifferential algebraic equations (DAEs),\nstochastic differential equations (SDEs).","category":"page"},{"location":"","page":"Home","title":"Home","text":"For each type, there are several subtypes","category":"page"},{"location":"","page":"Home","title":"Home","text":"standard equations (ODE, DAE, SDE),\nimplicit equations (IODE, IDAE),\npartitioned equations (PODE, PDAE, PSDE),\nHamiltonian equations (HODE, HDAE),\nLagrangian equations (LODE, LDAE),\nsplit equations (SODE, SPDAE), SPSDE).","category":"page"},{"location":"","page":"Home","title":"Home","text":"Each equation holds a number of functions determining the vector field, constraints, initial conditions, and possibly additional information like parameters, periodicity, invariants and the Hamiltonian or Lagrangian.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [GeometricEquations]","category":"page"},{"location":"#GeometricEquations.DAE","page":"Home","title":"GeometricEquations.DAE","text":"DAE: Differential Algebraic Equation\n\nDefines a differential algebraic initial value problem\n\nbeginaligned\ndotq (t) = v(t q(t)) + u(t q(t) lambda(t))   q(t_0) = q_0  \n0 = phi (t q(t) lambda(t))   lambda(t_0) = lambda_0 \nendaligned\n\nwith vector field v, projection u, algebraic constraint phi=0, initial conditions q_0 and lambda_0, the dynamical variable q taking values in mathbbR^d and the algebraic variable lambda taking values in mathbbR^m.\n\nParameters\n\nDT <: Number: data type\nTT <: Real: time step type\nAT <: AbstractArray{DT}: array type\nvType <: Function: type of v\nuType <: Function: type of u\nūType <: OptionalFunction: type of ū\nϕType <: Function: type of ϕ\nψType <: OptionalFunction: type of ψ\nv̄Type <: Function: type of v̄\ninvType <: OptionalNamedTuple: invariants type\nparType <: OptionalNamedTuple: parameters type\nperType <: OptionalArray{AT}: periodicity type\n\nFields\n\nd: dimension of dynamical variable q and the vector field v\nm: dimension of algebraic variable lambda and the constraint phi\nv: function computing the vector field\nu: function computing the projection\nū: function computing the secondary projection field baru (optional)\nϕ: algebraic constraint\nψ: secondary constraints (optional)\nv̄: function computing an initial guess for the velocity field v (defaults to v)\nt₀: initial time\nq₀: initial condition for dynamical variable q\nλ₀: initial condition for algebraic variable lambda\nμ₀: initial condition for algebraic variable μ (optional)\ninvariants: either a NamedTuple containing the equation's invariants or nothing\nparameters: either a NamedTuple containing the equation's parameters or nothing\nperiodicity: determines the periodicity of the state vector q for cutting periodic solutions\n\nThe function v, providing the vector field, takes three arguments, v(t, q, v), the functions u and ϕ, providing the projection and the algebraic constraint take four arguments, u(t, q, λ, u) and ϕ(t, q, λ, ϕ), where t is the current time, q and λ are the current solution vectors, and v, u and ϕ are the vectors which hold the result of evaluating the vector field v, the projection u and the algebraic constraint phi on t, q and λ.\n\nConstructors\n\nDAE(v, u, ū, ϕ, ψ, v̄, t₀, q₀, λ₀, invariants, parameters, periodicity)\n\nDAE(v, u, ϕ, t₀, q₀::StateVector, λ₀::StateVector, μ₀::StateVector=zero(λ₀); kwargs...)\nDAE(v, u, ϕ, q₀::StateVector, λ₀::StateVector, μ₀::StateVector=zero(λ₀); kwargs...)\nDAE(v, u, ϕ, t₀, q₀::State, λ₀::State, μ₀::State=zero(λ₀); kwargs...)\nDAE(v, u, ϕ, q₀::State, λ₀::State, μ₀::State=zero(λ₀); kwargs...)\n\nDAE(v, u, ū, ϕ, ψ, t₀, q₀::StateVector, λ₀::StateVector, μ₀::StateVector=zero(λ₀); kwargs...)\nDAE(v, u, ū, ϕ, ψ, q₀::StateVector, λ₀::StateVector, μ₀::StateVector=zero(λ₀); kwargs...)\nDAE(v, u, ū, ϕ, ψ, t₀, q₀::State, λ₀::State, μ₀::State=zero(λ₀); kwargs...)\nDAE(v, u, ū, ϕ, ψ, q₀::State, λ₀::State, μ₀::State=zero(λ₀); kwargs...)\n\nExample\n\n    function v(t, q, v)\n        v[1] = q[1]\n        v[2] = q[2]\n    end\n\n    function u(t, q, λ, u)\n        u[1] = +λ[1]\n        u[2] = -λ[1]\n    end\n\n    function ϕ(t, q, λ, ϕ)\n        ϕ[1] = q[2] - q[1]\n    end\n\n    t₀ = 0.\n    q₀ = [1., 1.]\n    λ₀ = [0.]\n\n    dae = DAE(v, u, ϕ, t₀, q₀, λ₀)\n\n\n\n\n\n\n","category":"type"},{"location":"#GeometricEquations.HDAE","page":"Home","title":"GeometricEquations.HDAE","text":"HDAE: Hamiltonian Differential Algebraic Equation EXPERIMENTAL\n\nDefines a Hamiltonian differential algebraic initial value problem, that is a canonical Hamiltonian system of equations subject to Dirac constraints,\n\nbeginaligned\ndotq (t) = v(t q(t) p(t)) + u(t q(t) p(t) lambda(t)) + barg(t q(t) p(t) lambda(t) gamma(t))   q(t_0) = q_0  \ndotp (t) = f(t q(t) p(t)) + g(t q(t) p(t) lambda(t)) + barf(t q(t) p(t) lambda(t) gamma(t))   p(t_0) = p_0  \n0 = phi (t q(t) p(t))  \n0 = psi (t q(t) p(t) dotq(t) dotp(t)) \nendaligned\n\nwith vector fields v, u, baru and f, g, barg, primary constraint phi(qp)=0 and secondary constraint psi(qplambda)=0, initial conditions (q_0 p_0), the dynamical variables (qp) taking values in mathbbR^d times mathbbR^d and the algebraic variables (lambda gamma) taking values in mathbbR^m times mathbbR^m.\n\nParameters\n\nDT <: Number: data type\nTT <: Real: time step type\nAT <: AbstractArray{DT}: array type\nvType <: Function: type of v\nfType <: Function: type of f\nuType <: Function: type of u\ngType <: Function: type of g\nϕType <: Function: type of ϕ\nūType <: Function: type of ū\nḡType <: Function: type of ḡ\nψType <: Function: type of ψ\nPType <: Function: type of P\nv̄Type <: Function: type of v̄\nf̄Type <: Function: type of f̄\nhamType <: Function: Hamiltonian type\ninvType <: OptionalNamedTuple: invariants type\nparType <: OptionalNamedTuple: parameters type\nperType <: OptionalArray{AT}: periodicity type\n\nFields\n\nd: dimension of dynamical variables q and p as well as the vector fields v and f\nm: dimension of algebraic variables lambda and gamma and the constraints phi and psi\nv: function computing the Hamiltonian vector field v\nf: function computing the Hamiltonian vector field f\nu: function computing the projection for q\ng: function computing the primary projection field g\nϕ: primary constraints\nū: function computing the secondary projection field baru (optional)\nḡ: function computing the secondary projection field barg (optional)\nψ: secondary constraints (optional)\nP: function computing the Poisson matrix P\nv̄: function computing an initial guess for the velocity field v(optional, defaults tov`)\nf̄: function computing an initial guess for the force field f (optional, defaults to f)\nt₀: initial time (optional)\nq₀: initial condition for dynamical variable q\np₀: initial condition for dynamical variable p\nλ₀: initial condition for algebraic variable λ\nμ₀: initial condition for algebraic variable μ (optional)\nhamiltonian: function computing the Hamiltonian H\ninvariants: either a NamedTuple containing the equation's invariants or nothing\nparameters: either a NamedTuple containing the equation's parameters or nothing\nperiodicity: determines the periodicity of the state vector q for cutting periodic solutions\n\nConstructors\n\nHDAE(v, f, u, g, ϕ, ū, ḡ, ψ, v̄, f̄, P, t₀, q₀, p₀, λ₀, hamiltonian, invariants, parameters, periodicity)\n\nHDAE(v, f, u, g, ϕ, h, t₀, q₀::StateVector, p₀::StateVector, λ₀::StateVector; kwargs...)\nHDAE(v, f, u, g, ϕ, h, q₀::StateVector, p₀::StateVector, λ₀::StateVector; kwargs...)\nHDAE(v, f, u, g, ϕ, h, t₀, q₀::State, p₀::State, λ₀::State; kwargs...)\nHDAE(v, f, u, g, ϕ, h, q₀::State, p₀::State, λ₀::State; kwargs...)\n\nHDAE(v, f, u, g, ϕ, ū, ḡ, ψ, h, t₀, q₀::StateVector, p₀::StateVector, λ₀::StateVector; kwargs...)\nHDAE(v, f, u, g, ϕ, ū, ḡ, ψ, h, q₀::StateVector, p₀::StateVector, λ₀::StateVector; kwargs...)\nHDAE(v, f, u, g, ϕ, ū, ḡ, ψ, h, t₀, q₀::State, p₀::State, λ₀::State; kwargs...)\nHDAE(v, f, u, g, ϕ, ū, ḡ, ψ, h, q₀::State, p₀::State, λ₀::State; kwargs...)\n\n\n\n\n\n","category":"type"},{"location":"#GeometricEquations.HODE","page":"Home","title":"GeometricEquations.HODE","text":"HODE: Hamiltonian Ordinary Differential Equation\n\nDefines a Hamiltonian ordinary differential initial value problem, that is a canonical Hamiltonian system of equations,\n\nbeginaligned\ndotq (t) = v(t q(t) p(t))   q(t_0) = q_0  \ndotp (t) = f(t q(t) p(t))   p(t_0) = p_0 \nendaligned\n\nwith vector fields v and f, given by\n\nbeginaligned\nv =   fracpartial Hpartial p  \nf = - fracpartial Hpartial q \nendaligned\n\ninitial conditions (q_0 p_0) and the dynamical variables (qp) taking values in mathbbR^d times mathbbR^d.\n\nParameters\n\nDT <: Number: data type\nTT <: Real: time step type\nAT <: AbstractArray{DT}: array type\nvType <: Function: type of v\nfType <: Function: type of f\nPType <: Function: type of P\nhamType <: Function: Hamiltonian type\ninvType <: OptionalNamedTuple: invariants type\nparType <: OptionalNamedTuple: parameters type\nperType <: OptionalArray{AT}: periodicity type\n\nFields\n\nd: dimension of dynamical variables q and p as well as the vector fields v and f\nv: function computing the vector field v\nf: function computing the vector field f\nP: function computing the Poisson matrix P\nt₀: initial time\nq₀: initial condition for dynamical variable q\np₀: initial condition for dynamical variable p\nhamiltonian: function computing the Hamiltonian H\ninvariants: either a NamedTuple containing the equation's invariants or nothing\nparameters: either a NamedTuple containing the equation's parameters or nothing\nperiodicity: determines the periodicity of the state vector q for cutting periodic solutions\n\nConstructors\n\nHODE(v, f, poisson, t₀, q₀, p₀, hamiltonian, invariants, parameters, periodicity)\n\nHODE(v, f, h, t₀, q₀::StateVector, p₀::StateVector; kwargs...)\nHODE(v, f, h, q₀::StateVector, p₀::StateVector; kwargs...)\nHODE(v, f, h, t₀, q₀::State, p₀::State; kwargs...)\nHODE(v, f, h, q₀::State, p₀::State; kwargs...)\n\nKeyword arguments:\n\npoisson = symplectic_matrix\ninvariants = nothing\nparameters = nothing\nperiodicity = nothing\n\n\n\n\n\n","category":"type"},{"location":"#GeometricEquations.IDAE","page":"Home","title":"GeometricEquations.IDAE","text":"IDAE: Implicit Differential Algebraic Equation\n\nDefines an implicit differential algebraic initial value problem\n\nbeginaligned\ndotq (t) = v(t) + u(t q(t) p(t) lambda(t))   q(t_0) = q_0  \ndotp (t) = f(t q(t) v(t)) + r(t q(t) p(t) lambda(t))   p(t_0) = p_0  \np(t) = p(t q(t) v(t))   \n0 = phi (t q(t) p(t) lambda(t))   lambda(t_0) = lambda_0 \nendaligned\n\nwith force field f, the momentum defined by p, projection u and r, algebraic constraint phi=0, conditions (q_0 p_0) and lambda_0, the dynamical variables (qp) taking values in mathbbR^d times mathbbR^d and the algebraic variable lambda taking values in mathbbR^m.\n\nParameters\n\nDT <: Number: data type\nTT <: Real: time step type\nAT <: AbstractArray{DT}: array type\nϑType <: Function: type of ϑ\nfType <: Function: type of f\nuType <: Function: type of u\ngType <: Function: type of g\nϕType <: Function: type of ϕ\nūType <: Function: type of ū\nḡType <: Function: type of ḡ\nψType <: Function: type of ψ\nv̄Type <: Function: type of v̄\nf̄Type <: Function: type of f̄\ninvType <: OptionalNamedTuple: invariants type\nparType <: OptionalNamedTuple: parameters type\nperType <: OptionalArray{AT}: periodicity type\n\nFields\n\nd: dimension of dynamical variables q and p as well as the vector fields f and p\nm: dimension of algebraic variable lambda and the constraint phi\nϑ: function determining the momentum\nf: function computing the vector field f\nu: function computing the projection for q\ng: function computing the projection for p\nϕ: algebraic constraints\nū: function computing the secondary projection field baru (optional)\nḡ: function computing the secondary projection field barg (optional)\nψ: secondary constraints (optional)\nv̄: function computing an initial guess for the velocity field v (optional)\nf̄: function computing an initial guess for the force field f (optional)\nt₀: initial time (optional)\nq₀: initial condition for dynamical variable q\np₀: initial condition for dynamical variable p\nλ₀: initial condition for algebraic variable λ\nμ₀: initial condition for algebraic variable μ (optional)\ninvariants: either a NamedTuple containing the equation's invariants or nothing\nparameters: either a NamedTuple containing the equation's parameters or nothing\nperiodicity: determines the periodicity of the state vector q for cutting periodic solutions\n\nConstructors\n\nIDAE(ϑ, f, u, g, ϕ, ū, ḡ, ψ, v̄, f̄, t₀, q₀, p₀, λ₀, μ₀, invariants, parameters, periodicity)\n\nIDAE(ϑ, f, u, g, ϕ, t₀, q₀::StateVector, p₀::StateVector, λ₀::StateVector, μ₀::StateVector=zero(λ₀); kwargs...)\nIDAE(ϑ, f, u, g, ϕ, q₀::StateVector, p₀::StateVector, λ₀::StateVector, μ₀::StateVector=zero(λ₀); kwargs...)\nIDAE(ϑ, f, u, g, ϕ, t₀, q₀::State, p₀::State, λ₀::State, μ₀::State=zero(λ₀); kwargs...)\nIDAE(ϑ, f, u, g, ϕ, q₀::State, p₀::State, λ₀::State, μ₀::State=zero(λ₀); kwargs...)\n\nIDAE(ϑ, f, u, g, ϕ, ū, ḡ, ψ, t₀, q₀::StateVector, p₀::StateVector, λ₀::StateVector, μ₀::StateVector=zero(λ₀); kwargs...)\nIDAE(ϑ, f, u, g, ϕ, ū, ḡ, ψ, q₀::StateVector, p₀::StateVector, λ₀::StateVector, μ₀::StateVector=zero(λ₀); kwargs...)\nIDAE(ϑ, f, u, g, ϕ, ū, ḡ, ψ, t₀, q₀::State, p₀::State, λ₀::State, μ₀::State=zero(λ₀); kwargs...)\nIDAE(ϑ, f, u, g, ϕ, ū, ḡ, ψ, q₀::State, p₀::State, λ₀::State, μ₀::State=zero(λ₀); kwargs...)\n\nKeyword arguments\n\nv̄ = (t,q,v) -> nothing\nf̄ = f\ninvariants = nothing\nparameters = nothing\nperiodicity = nothing\n\n\n\n\n\n","category":"type"},{"location":"#GeometricEquations.IODE","page":"Home","title":"GeometricEquations.IODE","text":"IODE: Implicit Ordinary Differential Equation\n\nDefines an implicit initial value problem\n\nbeginaligned\ndotq (t) = v(t)  \nq(t_0) = q_0  \ndotp (t) = f(t q(t) v(t))  \np(t_0) = p_0  \np(t) = ϑ(t q(t) v(t))\nendaligned\n\nwith force field f, the momentum defined by p, initial conditions (q_0 p_0) and the solution (qp) taking values in mathbbR^d times mathbbR^d. This is a special case of a differential algebraic equation with dynamical variables (qp) and algebraic variable v.\n\nParameters\n\nDT <: Number: data type\nTT <: Real: time step type\nAT <: AbstractArray{DT}: array type\nϑType <: Function: type of ϑ\nfType <: Function: type of f\ngType <: Function: type of g\nv̄Type <: Function: type of v̄\nf̄Type <: Function: type of f̄\nhType <: OptionalFunction: type of h\npType <: Union{NamedTuple,Nothing}: parameters type\n\nFields\n\nd: dimension of dynamical variables q and p as well as the vector fields f and p\nϑ: function determining the momentum\nf: function computing the vector field\ng: function determining the projection, given by nabla vartheta (q) cdot lambda\nv̄: function computing an initial guess for the velocity field v (optional)\nf̄: function computing an initial guess for the force field f (optional)\nh: function computing the Hamiltonian (optional)\nt₀: initial time (optional)\nq₀: initial condition for q\np₀: initial condition for p\nparameters: either a NamedTuple containing the equations parameters or nothing\nperiodicity: determines the periodicity of the state vector q for cutting periodic solutions\n\nThe functions ϑ and f must have the interface\n\n    function ϑ(t, q, v, p)\n        p[1] = ...\n        p[2] = ...\n        ...\n    end\n\nand\n\n    function f(t, q, v, f)\n        f[1] = ...\n        f[2] = ...\n        ...\n    end\n\nwhere t is the current time, q is the current solution vector, v is the current velocity and f and p are the vectors which hold the result of evaluating the functions f and ϑ on t, q and v. In addition, the functions g, v̄ and f̄ are specified by\n\n    function g(t, q, λ, g)\n        g[1] = ...\n        g[2] = ...\n        ...\n    end\n\n    function v̄(t, q, v)\n        v[1] = ...\n        v[2] = ...\n        ...\n    end\n\n    function f̄(t, q, v, f)\n        f[1] = ...\n        f[2] = ...\n        ...\n    end\n\nThe function g is used in projection methods that enforce p = ϑ(q). The functions v̄ and f̄ are used for initial guesses in nonlinear implicit solvers.\n\nConstructors\n\nIODE(ϑ, f, v̄, f̄, t₀, q₀, p₀, λ₀, invariants, parameters, periodicity)\n\nIODE(ϑ, f, t₀, q₀::StateVector, p₀::StateVector, λ₀::StateVector=zero(q₀); kwargs...)\nIODE(ϑ, f, q₀::StateVector, p₀::StateVector, λ₀::StateVector=zero(q₀); kwargs...)\nIODE(ϑ, f, t₀, q₀::State, p₀::State, λ₀::StateVector=zero(q₀); kwargs...)\nIODE(ϑ, f, q₀::State, p₀::State, λ₀::StateVector=zero(q₀); kwargs...)\n\nKeyword arguments\n\nv̄ = (t,q,v) -> nothing\nf̄ = f\ninvariants = nothing\nparameters = nothing\nperiodicity = nothing\n\n\n\n\n\n","category":"type"},{"location":"#GeometricEquations.LDAE","page":"Home","title":"GeometricEquations.LDAE","text":"LDAE: Lagrangian Differential Algebraic Equation\n\nDefines a Lagrangian differential algebraic initial value problem, that is a special implicit initial value problem\n\nbeginaligned\ndotq (t) = v(t) + lambda(t) \nq(t_0) = q_0  \ndotp (t) = f(t q(t) v(t)) + g(t q(t) lambda(t)) + barg (t q(t) mu(t))  \np(t_0) = p_0  \np(t) = ϑ(t q(t) v(t))  \n0 = phi (t q(t) p(t))  \n0 = psi (t q(t) p(t) dotq(t) dotp(t)) \nendaligned\n\nwith vector field f, the momentum defined by p, initial conditions (q_0 p_0) and the solution (qp) taking values in mathbbR^d times mathbbR^d and the algebraic variables (v lambda mu) taking values in mathbbR^d times mathbbR^m times mathbbR^m. This is a special case of a differential algebraic equation with dynamical variables (qp) and algebraic variables v, lambda and mu.\n\nParameters\n\nDT <: Number: data type\nTT <: Real: time step type\nAT <: AbstractArray{DT}: array type\nϑType <: Function: type of ϑ\nfType <: Function: type of f\nuType <: Function: type of u\ngType <: Function: type of g\nϕType <: Function: type of ϕ\nūType <: Function: type of ū\nḡType <: Function: type of ḡ\nψType <: Function: type of ψ\nωType <: Function: type of ω\nv̄Type <: Function: type of v̄\nf̄Type <: Function: type of f̄\nlagType <: Function: Lagrangian type\ninvType <: OptionalNamedTuple: invariants type\nparType <: OptionalNamedTuple: parameters type\nperType <: OptionalArray{AT}: periodicity type\n\nFields\n\nd: dimension of dynamical variables q and p as well as the vector fields f and p\nϑ: function determining the momentum\nf: function computing the vector field\nu: function computing the projection for q, for a degenerate system given by lambda\ng: function computing the projection for p, for a degenerate system given by nabla vartheta (q) cdot lambda\nϕ: primary constraints, for a degenerate system given by p - vartheta (q)\nū: function computing the secondary projection field baru, for a degenerate system given by lambda (optional)\nḡ: function computing the secondary projection field barg, for a degenerate system given by lambda cdot nabla vartheta (q) (optional)\nψ: secondary constraints, for a degenerate system given by dotp - dotq cdot nabla vartheta (q) (optional)\nω: function computing the symplectic matrix\nv̄: function computing an initial guess for the velocity field v (optional)\nf̄: function computing an initial guess for the force field f (optional)\nt₀: initial time (optional)\nq₀: initial condition for dynamical variable q\np₀: initial condition for dynamical variable p\nλ₀: initial condition for algebraic variable λ\nμ₀: initial condition for algebraic variable μ (optional)\nlagrangian: function computing the Lagrangian L\ninvariants: either a NamedTuple containing the equation's invariants or nothing\nparameters: either a NamedTuple containing the equation's parameters or nothing\nperiodicity: determines the periodicity of the state vector q for cutting periodic solutions\n\nThe functions ϑ and f must have the interface\n\n    function ϑ(t, q, v, p)\n        p[1] = ...\n        p[2] = ...\n        ...\n    end\n\nand\n\n    function f(t, q, v, f)\n        f[1] = ...\n        f[2] = ...\n        ...\n    end\n\nwhere t is the current time, q is the current solution vector, v is the current velocity and f and p are the vectors which hold the result of evaluating the functions f and ϑ on t, q and v. The funtions g, v̄ and f̄ are specified by\n\n    function g(t, q, λ, g)\n        g[1] = ...\n        g[2] = ...\n        ...\n    end\n\n    function v̄(t, q, v)\n        v[1] = ...\n        v[2] = ...\n        ...\n    end\n\n    function f̄(t, q, v, f)\n        f[1] = ...\n        f[2] = ...\n        ...\n    end\n\nConstructors\n\nLDAE(ϑ, f, u, g, ϕ, ū, ḡ, ψ, ω, v̄, f̄, t₀, q₀, p₀, λ₀, μ₀, lagrangian, invariants, parameters, periodicity)\n\nLDAE(ϑ, f, u, g, ϕ, l, ω, t₀, q₀::StateVector, p₀::StateVector, λ₀::StateVector, μ₀::StateVector=zero(λ₀); kwargs...)\nLDAE(ϑ, f, u, g, ϕ, l, ω, q₀::StateVector, p₀::StateVector, λ₀::StateVector, μ₀::StateVector=zero(λ₀); kwargs...)\nLDAE(ϑ, f, u, g, ϕ, l, ω, t₀, q₀::State, p₀::State, λ₀::State, μ₀::State=zero(λ₀); kwargs...)\nLDAE(ϑ, f, u, g, ϕ, l, ω, q₀::State, p₀::State, λ₀::State, μ₀::State=zero(λ₀); kwargs...)\n\nLDAE(ϑ, f, u, g, ϕ, ū, ḡ, ψ, l, ω, t₀, q₀::StateVector, p₀::StateVector, λ₀::StateVector, μ₀::StateVector=zero(λ₀); kwargs...)\nLDAE(ϑ, f, u, g, ϕ, ū, ḡ, ψ, l, ω, q₀::StateVector, p₀::StateVector, λ₀::StateVector, μ₀::StateVector=zero(λ₀); kwargs...)\nLDAE(ϑ, f, u, g, ϕ, ū, ḡ, ψ, l, ω, t₀, q₀::State, p₀::State, λ₀::State, μ₀::State=zero(λ₀); kwargs...)\nLDAE(ϑ, f, u, g, ϕ, ū, ḡ, ψ, l, ω, q₀::State, p₀::State, λ₀::State, μ₀::State=zero(λ₀); kwargs...)\n\nKeyword arguments\n\nv̄ = (t,q,v) -> nothing\nf̄ = f\ninvariants = nothing\nparameters = nothing\nperiodicity = nothing\n\n\n\n\n\n","category":"type"},{"location":"#GeometricEquations.LODE","page":"Home","title":"GeometricEquations.LODE","text":"LODE: Lagrangian Ordinary Differential Equation\n\nDefines an implicit initial value problem\n\nbeginaligned\ndotq (t) = v(t)  \nq(t_0) = q_0  \ndotp (t) = f(t q(t) v(t))  \np(t_0) = p_0  \np(t) = ϑ(t q(t) v(t))\nendaligned\n\nwith momentum p and force field f, given by\n\nbeginaligned\np = fracpartial Lpartial v  \nf = fracpartial Lpartial q \nendaligned\n\ninitial conditions (q_0 p_0) and the solution (qp) taking values in mathbbR^d times mathbbR^d. This is a special case of a differential algebraic equation with dynamical variables (qp) and algebraic variable v.\n\nParameters\n\nDT <: Number: data type\nTT <: Real: time step type\nAT <: AbstractArray{DT}: array type\nϑType <: Function: type of ϑ\nfType <: Function: type of f\ngType <: Function: type of g\nωType <: Function: type of ω\nv̄Type <: Function: type of v̄\nf̄Type <: Function: type of f̄\nlagType <: Function: Lagrangian type\ninvType <: OptionalNamedTuple: invariants type\nparType <: OptionalNamedTuple: parameters type\nperType <: OptionalArray{AT}: periodicity type\n\nFields\n\nd: dimension of dynamical variables q and p as well as the vector fields f and p\nϑ: function determining the momentum\nf: function computing the vector field\ng: function determining the projection, given by nabla vartheta (q) cdot lambda\nω: function computing the symplectic matrix\nv̄: function computing an initial guess for the velocity field v (optional)\nf̄: function computing an initial guess for the force field f (optional)\nt₀: initial time (optional)\nq₀: initial condition for q\np₀: initial condition for p\nλ₀: initial condition for λ (optional)\nlagrangian: function computing the Lagrangian L\ninvariants: either a NamedTuple containing the equation's invariants or nothing\nparameters: either a NamedTuple containing the equation's parameters or nothing\nperiodicity: determines the periodicity of the state vector q for cutting periodic solutions\n\nThe functions ϑ and f must have the interface\n\n    function ϑ(t, q, v, p)\n        p[1] = ...\n        p[2] = ...\n        ...\n    end\n\nand\n\n    function f(t, q, v, f)\n        f[1] = ...\n        f[2] = ...\n        ...\n    end\n\nwhere t is the current time, q is the current solution vector, v is the current velocity and f and p are the vectors which hold the result of evaluating the functions f and ϑ on t, q and v. The funtions g and v are specified by\n\n    function g(t, q, λ, g)\n        g[1] = ...\n        g[2] = ...\n        ...\n    end\n\nand\n\n    function v(t, q, p, v)\n        v[1] = ...\n        v[2] = ...\n        ...\n    end\n\nConstructors\n\nLODE(ϑ, f, ω, v̄, f̄, t₀, q₀, p₀, λ₀, lagrangian, invariants, parameters, periodicity)\n\nLODE(ϑ, f, l, ω, t₀, q₀::StateVector, p₀::StateVector, λ₀::StateVector=zero(q₀); kwargs...)\nLODE(ϑ, f, l, ω, q₀::StateVector, p₀::StateVector, λ₀::StateVector=zero(q₀); kwargs...)\nLODE(ϑ, f, l, ω, t₀, q₀::State, p₀::State, λ₀::StateVector=zero(q₀); kwargs...)\nLODE(ϑ, f, l, ω, q₀::State, p₀::State, λ₀::StateVector=zero(q₀); kwargs...)\n\nKeyword arguments\n\nv̄ = (t,q,v) -> nothing\nf̄ = f\ninvariants = nothing\nparameters = nothing\nperiodicity = nothing\n\n\n\n\n\n","category":"type"},{"location":"#GeometricEquations.ODE","page":"Home","title":"GeometricEquations.ODE","text":"ODE: Ordinary Differential Equation\n\nDefines an initial value problem\n\ndotq (t) = v(t q(t))  qquad q(t_0) = q_0 \n\nwith vector field v, initial condition q_0 and the solution q taking values in mathbbR^d.\n\nParameters\n\nDT <: Number: data type\nTT <: Real: time step type\nAT <: AbstractArray{DT}: array type\nvType <: Function: type of v\ninvType <: OptionalNamedTuple: invariants type\nparType <: OptionalNamedTuple: parameters type\nperType <: OptionalArray{AT}: periodicity type\n\nFields\n\nd: dimension of dynamical variable q and the vector field v\nv: function computing the vector field\nt₀: initial time\nq₀: initial condition\ninvariants: either a NamedTuple containing the equation's invariants or nothing\nparameters: either a NamedTuple containing the equation's parameters or nothing\nperiodicity: determines the periodicity of the state vector q for cutting periodic solutions\n\nThe function v providing the vector field must have the interface\n\n    function v(t, q, v)\n        v[1] = ...\n        v[2] = ...\n        ...\n    end\n\nwhere t is the current time, q is the current solution vector, and v is the vector which holds the result of evaluating the vector field v on t and q.\n\nConstructors\n\nODE(v, t₀, q₀, invariants, parameters, periodicity)\n\nODE(v, t₀, q₀::StateVector; kwargs...)\nODE(v, q₀::StateVector; kwargs...)\nODE(v, t₀, q₀::State; kwargs...)\nODE(v, q₀::State; kwargs...)\n\nKeyword arguments:\n\ninvariants = nothing\nparameters = nothing\nperiodicity = nothing\n\n\n\n\n\n","category":"type"},{"location":"#GeometricEquations.PDAE","page":"Home","title":"GeometricEquations.PDAE","text":"PDAE: Partitioned Differential Algebraic Equation\n\nDefines a partitioned differential algebraic initial value problem\n\nbeginaligned\ndotq (t) = v(t q(t) p(t)) + u(t q(t) p(t) lambda(t))   q(t_0) = q_0  \ndotp (t) = f(t q(t) p(t)) + r(t q(t) p(t) lambda(t))   p(t_0) = p_0  \n0 = phi (t q(t) p(t) lambda(t))   lambda(t_0) = lambda_0 \nendaligned\n\nwith vector fields v and f, projection u and r, algebraic constraint phi=0, conditions (q_0 p_0) and lambda_0, the dynamical variables (qp) taking values in mathbbR^d times mathbbR^d and the algebraic variable lambda taking values in mathbbR^m.\n\nParameters\n\nDT <: Number: data type\nTT <: Real: time step type\nAT <: AbstractArray{DT}: array type\nvType <: Function: type of v\nfType <: Function: type of f\nuType <: Function: type of u\ngType <: Function: type of g\nϕType <: Function: type of ϕ\nūType <: Function: type of ū\nḡType <: Function: type of ḡ\nψType <: Function: type of ψ\nv̄Type <: Function: type of v̄\nf̄Type <: Function: type of f̄\ninvType <: OptionalNamedTuple: invariants type\nparType <: OptionalNamedTuple: parameters type\nperType <: OptionalArray{AT}: periodicity type\n\nFields\n\nd: dimension of dynamical variables q and p as well as the vector fields f and p\nm: dimension of algebraic variable lambda and the constraint phi\nv: function computing the vector field v\nf: function computing the vector field f\nu: function computing the projection for q\ng: function computing the projection for p\nϕ: algebraic constraints\nū: function computing the secondary projection field baru (optional)\nḡ: function computing the secondary projection field barg (optional)\nψ: secondary constraints (optional)\nv̄: function computing an initial guess for the velocity field v (optional)\nf̄: function computing an initial guess for the force field f (optional)\nt₀: initial time\nq₀: initial condition for dynamical variable q\np₀: initial condition for dynamical variable p\nλ₀: initial condition for algebraic variable lambda\nμ₀: initial condition for algebraic variable μ (optional)\ninvariants: either a NamedTuple containing the equation's invariants or nothing\nparameters: either a NamedTuple containing the equation's parameters or nothing\nperiodicity: determines the periodicity of the state vector q for cutting periodic solutions\n\nConstructors\n\nPDAE(v, f, u, g, ϕ, ū, ḡ, ψ, v̄, f̄, t₀, q₀, p₀, λ₀, invariants, parameters, periodicity)\n\nPDAE(v, f, u, g, ϕ, t₀, q₀::StateVector, p₀::StateVector, λ₀::StateVector, μ₀::StateVector=zero(λ₀); kwargs...)\nPDAE(v, f, u, g, ϕ, q₀::StateVector, p₀::StateVector, λ₀::StateVector, μ₀::StateVector=zero(λ₀); kwargs...)\nPDAE(v, f, u, g, ϕ, t₀, q₀::State, p₀::State, λ₀::State, μ₀::State=zero(λ₀); kwargs...)\nPDAE(v, f, u, g, ϕ, q₀::State, p₀::State, λ₀::State, μ₀::State=zero(λ₀); kwargs...)\n\nPDAE(v, f, u, g, ϕ, ū, ḡ, ψ, t₀, q₀::StateVector, p₀::StateVector, λ₀::StateVector, μ₀::StateVector=zero(λ₀); kwargs...)\nPDAE(v, f, u, g, ϕ, ū, ḡ, ψ, q₀::StateVector, p₀::StateVector, λ₀::StateVector, μ₀::StateVector=zero(λ₀); kwargs...)\nPDAE(v, f, u, g, ϕ, ū, ḡ, ψ, t₀, q₀::State, p₀::State, λ₀::State, μ₀::State=zero(λ₀); kwargs...)\nPDAE(v, f, u, g, ϕ, ū, ḡ, ψ, q₀::State, p₀::State, λ₀::State, μ₀::State=zero(λ₀); kwargs...)\n\n\n\n\n\n","category":"type"},{"location":"#GeometricEquations.PODE","page":"Home","title":"GeometricEquations.PODE","text":"PODE: Partitioned Ordinary Differential Equation\n\nDefines a partitioned initial value problem\n\nbeginaligned\ndotq (t) = v(t q(t) p(t))  \nq(t_0) = q_0  \ndotp (t) = f(t q(t) p(t))  \np(t_0) = p_0 \nendaligned\n\nwith vector fields v and f, initial conditions (q_0 p_0) and the solution (qp) taking values in mathbbR^d times mathbbR^d.\n\nParameters\n\nDT <: Number: data type\nTT <: Real: time step type\nAT <: AbstractArray{DT}: array type\nvType <: Function: type of v\nfType <: Function: type of f\ninvType <: OptionalNamedTuple: invariants type\nparType <: OptionalNamedTuple: parameters type\nperType <: OptionalArray{AT}: periodicity type\n\nFields\n\nd: dimension of dynamical variables q and p as well as the vector fields v and f\nv: function computing the vector field v\nf: function computing the vector field f\nt₀: initial time\nq₀: initial condition for q\np₀: initial condition for p\ninvariants: either a NamedTuple containing the equation's invariants or nothing\nparameters: either a NamedTuple containing the equation's parameters or nothing\nperiodicity: determines the periodicity of the state vector q for cutting periodic solutions\n\nThe functions v and f must have the interface\n\n    function v(t, q, p, v)\n        v[1] = ...\n        v[2] = ...\n        ...\n    end\n\nand\n\n    function f(t, q, p, f)\n        f[1] = ...\n        f[2] = ...\n        ...\n    end\n\nwhere t is the current time, q and p are the current solution vectors and v and f are the vectors which hold the result of evaluating the vector fields v and f on t, q and p.\n\nConstructors\n\nPODE(v, f, t₀, q₀, p₀, invariants, parameters, periodicity)\n\nPODE(v, f, h, t₀, q₀::StateVector, p₀::StateVector; kwargs...)\nPODE(v, f, q₀::StateVector, p₀::StateVector; kwargs...)\nPODE(v, f, t₀, q₀::State, p₀::State; kwargs...)\nPODE(v, f, q₀::State, p₀::State; kwargs...)\n\nKeyword arguments:\n\ninvariants = nothing\nparameters = nothing\nperiodicity = nothing\n\n\n\n\n\n","category":"type"},{"location":"#GeometricEquations.PSDE","page":"Home","title":"GeometricEquations.PSDE","text":"PSDE: Stratonovich Partitioned Stochastic Differential Equation\n\nDefines a partitioned stochastic differential initial value problem\n\nbeginaligned\ndq (t) = v(t q(t))  dt + B(t q(t)) circ dW   q(t_0) = q_0  \ndp (t) = f(t q(t))  dt + G(t q(t)) circ dW   p(t_0) = p_0\nendaligned\n\nwith the drift vector fields v and f, diffusion matrices B and G, initial conditions q_0 and p_0, the dynamical variables (qp) taking values in mathbbR^d times mathbbR^d, and the m-dimensional Wiener process W\n\nParameters\n\nDT <: Number: data type\nTT <: Real: time step type\nAT <: AbstractArray{DT}: array type\nvType <: Function: type of v\nfType <: Function: type of f\nBType <: Function: type of B\nGType <: Function: type of G\npType <: Union{NamedTuple,Nothing}: parameters type\n\nFields\n\nd:  dimension of dynamical variable q and the vector field v\nm:  dimension of the Wiener process\nns: number of sample paths\nv:  function computing the drift vector field for the position variable q\nf:  function computing the drift vector field for the momentum variable p\nB:  function computing the d x m diffusion matrix for the position variable q\nG:  function computing the d x m diffusion matrix for the momentum variable p\nt₀: initial time\nq₀: initial condition for dynamical variable q (may be a random variable itself)\np₀: initial condition for dynamical variable p (may be a random variable itself)\nparameters: either a NamedTuple containing the equations parameters or nothing\nperiodicity: determines the periodicity of the state vector q for cutting periodic solutions\n\nThe functions v, f, B and G, providing the drift vector fields and diffusion matrices, take four arguments, v(t, q, p, v), f(t, q, p, f), B(t, q, p,  B) and G(t, q, p, G), where t is the current time, (q, p) is the current solution vector, and v, f, B and G are the variables which hold the result of evaluating the vector fields v, f and the matrices B, G on t and (q,p).\n\nConstructors\n\nPSDE(m, ns, v, f, B, G, t₀, q₀, p₀; parameters=NullParameters(), periodicity=zero(q₀[begin]))\nPSDE(m, ns, v, f, B, G, q₀::StateVector, p₀::StateVector; kwargs...) = PSDE(m, ns, v, f, B, G, 0.0, q₀, p₀; kwargs...)\nPSDE(m, ns, v, f, B, G, t₀, q₀::State, p₀::State; kwargs...) = PSDE(m, ns, v, f, B, G, t₀, [q₀], [p₀]; kwargs...)\nPSDE(m, ns, v, f, B, G, q₀::State, p₀::State; kwargs...) = PSDE(m, ns, v, f, B, G, 0.0, q₀, p₀; kwargs...)\n\nExample\n\n    function v(λ, t, q, v)\n        v[1] = λ*q[1]\n        v[2] = λ*q[2]\n    end\n\n    function B(μ, t, q, B)\n        B[1] = μ*q[1]\n        B[2] = μ*q[2]\n    end\n\n    t₀ = 0.\n    q₀ = [1., 1.]\n    λ  = 2.\n    μ  = 1.\n\n    v_sde = (t, q, v) -> v(λ, t, q, v)\n    B_sde = (t, q, B) -> B(μ, t, q, B)\n\n    sde = SDE(v_sde, B_sde, t₀, q₀)\n\n\n\n\n\n","category":"type"},{"location":"#GeometricEquations.SDE","page":"Home","title":"GeometricEquations.SDE","text":"SDE: Stratonovich Stochastic Differential Equation\n\nDefines a stochastic differential initial value problem\n\nbeginaligned\ndq (t) = v(t q(t))  dt + B(t q(t)) circ dW   q(t_0) = q_0 \nendaligned\n\nwith drift vector field v, diffusion matrix B, initial conditions q_0, the dynamical variable q taking values in mathbbR^d, and the m-dimensional Wiener process W\n\nParameters\n\nDT <: Number: data type\nTT <: Real: time step type\nAT <: AbstractArray{DT}: array type\nvType <: Function: type of v\nBType <: Function: type of B\npType <: Union{NamedTuple,Nothing}: parameters type\n\nFields\n\nd:  dimension of dynamical variable q and the vector field v\nm:  dimension of the Wiener process\nns: number of sample paths\nv:  function computing the deterministic vector field\nB:  function computing the d x m diffusion matrix\nt₀: initial time\nq₀: initial condition for dynamical variable q (may be a random variable itself)\nparameters: either a NamedTuple containing the equations parameters or nothing\nperiodicity: determines the periodicity of the state vector q for cutting periodic solutions\n\nThe functions v and B, providing the drift vector field and diffusion matrix, v(t, q, v) and B(t, q, B, col=0), where t is the current time, q is the current solution vector, and v and B are the variables which hold the result of evaluating the vector field v and the matrix B on t and q (if col==0), or the column col of the matrix B (if col>0).\n\nConstructors\n\nSDE(m, ns, v, B, t₀, q₀; parameters=NullParameters(), periodicity=zero(q₀[begin]))\nSDE(m, ns, v, B, q₀::StateVector; kwargs...) = SDE(m, ns, v, B, 0.0, q₀; kwargs...)\nSDE(m, ns, v, B, t₀, q₀::State; kwargs...) = SDE(m, ns, v, B, t₀, [q₀]; kwargs...)\nSDE(m, ns, v, B, q₀::State; kwargs...) = SDE(m, ns, v, B, 0.0, q₀; kwargs...)\n\nExample\n\n    function v(t, q, v, p)\n        λ = p[:λ]\n        v[1] = λ*q[1]\n        v[2] = λ*q[2]\n    end\n\n    function B(t, q, B, p, col=0)\n        μ = p[:μ]\n        if col==0 #whole matrix\n            B[1,1] = μ*q[1]\n            B[2,1] = μ*q[2]\n        elseif col==1\n            #just first column\n        end\n    end\n\n    t₀ = 0.\n    q₀ = [1., 1.]\n    λ  = 2.\n    μ  = 1.\n    p = (λ=λ, μ=μ)\n\n    sde = SDE(v, B, t₀, q₀; parameters=p)\n\n\n\n\n\n","category":"type"},{"location":"#GeometricEquations.SODE","page":"Home","title":"GeometricEquations.SODE","text":"SODE: Split Ordinary Differential Equation\n\nDefines an initial value problem\n\ndotq (t) = v(t q(t))  qquad q(t_0) = q_0 \n\nwith vector field v, initial condition q_0 and the solution q taking values in mathbbR^d. Here, the vector field v is given as a sum of vector fields\n\nv (t) = v_1 (t) +  + v_r (t) \n\nParameters\n\nDT <: Number: data type\nTT <: Real: time step type\nAT <: AbstractArray{DT}: array type\nvType <: Union{Tuple,Nothing}: type of v\nqType <: Union{Tuple,Nothing}: type of q\ninvType <: OptionalNamedTuple: invariants type\nparType <: OptionalNamedTuple: parameters type\nperType <: OptionalArray{AT}: periodicity type\n\nFields\n\nd: dimension of dynamical variable q and the vector field v\nv: tuple of functions computing the vector field\nq: tuple of functions computing the solution\nt₀: initial time\nq₀: initial condition\ninvariants: either a NamedTuple containing the equation's invariants or nothing\nparameters: either a NamedTuple containing the equation's parameters or nothing\nperiodicity: determines the periodicity of the state vector q for cutting periodic solutions\n\nThe functions v_i providing the vector field must have the interface\n\n    function v_i(t, q, v)\n        v[1] = ...\n        v[2] = ...\n        ...\n    end\n\nand the functions q_i providing the solutions must have the interface\n\n    function q_i(t, q₀, q₁, h)\n        q₁[1] = q₀[1] + ...\n        q₁[2] = q₀[2] + ...\n        ...\n    end\n\nwhere t is the current time, q₀ is the current solution vector, q₁ is the new solution vector which holds the result of computing one substep with the vector field v_i on t and q₀, and h is the (sub-)timestep to compute the update for.\n\nThe fact that the function v returns the solution and not just the vector field for each substep increases the flexibility for the use of splitting methods, e.g., it allows to use another integrator for solving substeps.\n\nConstructors\n\nSODE(v, q, t₀, q₀, invariants, parameters, periodicity)\n\nSODE(v, q::Union{Tuple,Nothing}, t₀::Real, q₀::StateVector; kwargs...)\nSODE(v, q::Union{Tuple,Nothing}, t₀::Real, q₀::State; kwargs...)\nSODE(v, q::Union{Tuple,Nothing}, q₀::StateVector; kwargs...)\nSODE(v, q::Union{Tuple,Nothing}, q₀::State; kwargs...)\n\nSODE(v, t₀::Real, q₀::StateVector; kwargs...)\nSODE(v, t₀::Real, q₀::State; kwargs...)\nSODE(v, q₀::StateVector; kwargs...)\nSODE(v, q₀::State; kwargs...)\n\nKeyword arguments:\n\ninvariants = nothing\nparameters = nothing\nperiodicity = nothing\n\n\n\n\n\n","category":"type"},{"location":"#GeometricEquations.SPDAE","page":"Home","title":"GeometricEquations.SPDAE","text":"SPDAE: Split Partitioned Differential Algebraic Equation EXPERIMENTAL\n\nDefines a split differential algebraic initial value problem, that is a canonical Hamiltonian system of equations subject to Dirac constraints,\n\nbeginaligned\ndotq (t) = v_1(t q(t) p(t)) + v_2(t q(t) p(t) lambda(t)) + v_3(t q(t) p(t) lambda(t) gamma(t))   q(t_0) = q_0  \ndotp (t) = f_1(t q(t) p(t)) + f_2(t q(t) p(t) lambda(t)) + f_3(t q(t) p(t) lambda(t) gamma(t))   p(t_0) = p_0  \n0 = phi (t q(t) p(t))  \n0 = psi (t q(t) p(t) dotq(t) dotp(t)) \nendaligned\n\nwith vector fields v_i and f_i for i = 1  3, primary constraint phi(qp)=0 and secondary constraint psi(qplambda)=0, initial conditions (q_0 p_0), the dynamical variables (qp) taking values in mathbbR^d times mathbbR^d and the algebraic variables (lambda gamma) taking values in mathbbR^n times mathbbR^d.\n\nParameters\n\nDT <: Number: data type\nTT <: Real: time step type\nAT <: AbstractArray{DT}: array type\nvType <: Function: type of v\nfType <: Function: type of f\nϕType <: Function: type of ϕ\nψType <: Function: type of ψ\ninvType <: OptionalNamedTuple: invariants type\nparType <: OptionalNamedTuple: parameters type\nperType <: OptionalArray{AT}: periodicity type\n\nFields\n\nd: dimension of dynamical variables q and p as well as the vector fields v and f\nm: dimension of algebraic variables lambda and gamma and the constraints phi and psi\nv: tuple of functions computing the vector fields v_i, i = 1  3\nf: tuple of functions computing the vector fields f_i, i = 1  3\nϕ: primary constraints\nψ: secondary constraints\nt₀: initial time\nq₀: initial condition for dynamical variable q\np₀: initial condition for dynamical variable p\nλ₀: initial condition for algebraic variable λ\nμ₀: initial condition for algebraic variable μ (optional)\ninvariants: either a NamedTuple containing the equation's invariants or nothing\nparameters: either a NamedTuple containing the equation's parameters or nothing\nperiodicity: determines the periodicity of the state vector q for cutting periodic solutions\n\nConstructors\n\nSPDAE(v, f, ϕ, ψ, t₀, q₀::StateVector, p₀::StateVector, λ₀::StateVector; kwargs...)\nSPDAE(v, f, ϕ, ψ, q₀::StateVector, p₀::StateVector, λ₀::StateVector; kwargs...)\nSPDAE(v, f, ϕ, ψ, t₀, q₀::State, p₀::State, λ₀::State=zero(q₀); kwargs...)\nSPDAE(v, f, ϕ, ψ, q₀::State, p₀::State, λ₀::State=zero(q₀); kwargs...)\n\nKeyword arguments:\n\ninvariants = nothing\nparameters = nothing\nperiodicity = nothing\n\n\n\n\n\n","category":"type"},{"location":"#GeometricEquations.SPSDE","page":"Home","title":"GeometricEquations.SPSDE","text":"SPSDE: Stratonovich Split Partitioned Stochastic Differential Equation\n\nDefines a partitioned stochastic differential initial value problem\n\nbeginaligned\ndq (t) =   v(t q(t))  dt + B(t q(t)) circ dW   q(t_0) = q_0  \ndp (t) =  f_1(t q(t)) + f_2(t q(t))   dt +  G_1(t q(t)) + G_2(t q(t))  circ dW   p(t_0) = p_0 \nendaligned\n\nwith the drift vector fields v and f_i, diffusion matrices B and G_i, initial conditions q_0 and p_0, the dynamical variables (qp) taking values in mathbbR^d times mathbbR^d, and the m-dimensional Wiener process W\n\nParameters\n\nDT <: Number: data type\nTT <: Real: time step type\nAT <: AbstractArray{DT}: array type\nvType <: Function: type of v\nf1Type <: Function: type of f1\nf2Type <: Function: type of f2\nBType <: Function: type of B\nG1Type <: Function: type of G1\nG2Type <: Function: type of G2\npType <: Union{NamedTuple,Nothing}: parameters type\n\nFields\n\nd:  dimension of dynamical variable q and the vector fields vi\nm:  dimension of the Wiener process\nni: number of initial conditions\nns: number of sample paths\nv :  function computing the drift vector field for the position variable q\nf1:  function computing the drift vector field for the momentum variable p\nf2:  function computing the drift vector field for the momentum variable p\nB :  function computing the d x m diffusion matrix for the position variable q\nG1:  function computing the d x m diffusion matrix for the momentum variable p\nG2:  function computing the d x m diffusion matrix for the momentum variable p\nt₀: initial time\nq₀: initial condition for dynamical variable q (may be a random variable itself)\np₀: initial condition for dynamical variable p (may be a random variable itself)\nparameters: either a NamedTuple containing the equations parameters or nothing\nperiodicity: determines the periodicity of the state vector q for cutting periodic solutions\n\nThe functions v, f, B and G, providing the drift vector fields and diffusion matrices, take four arguments, v(t, q, p, v), f(t, q, p, f), B(t, q, p,  B) and G(t, q, p, G), where t is the current time, (q, p) is the current solution vector, and v, f, B and G are the variables which hold the result of evaluating the vector fields v, f and the matrices B, G on t and (q,p).\n\nConstructors\n\nSPSDE(m, ns, v, f1, f2, B, G1, G2, t₀, q₀, p₀; parameters=NullParameters(), periodicity=zero(q₀[begin]))\nSPSDE(m, ns, v, f1, f2, B, G1, G2, q₀::StateVector, p₀::StateVector; kwargs...) = SPSDE(m, ns, v, f1, f2, B, G1, G2, 0.0, q₀, p₀; kwargs...)\nSPSDE(m, ns, v, f1, f2, B, G1, G2, t₀, q₀::State, p₀::State; kwargs...) = SPSDE(m, ns, v, f1, f2, B, G1, G2, t₀, [q₀], [p₀]; kwargs...)\nSPSDE(m, ns, v, f1, f2, B, G1, G2, q₀::State, p₀::State; kwargs...) = SPSDE(m, ns, v, f1, f2, B, G1, G2, 0.0, q₀, p₀; kwargs...)\n\nExample\n\n    function v(λ, t, q, v)\n        v[1] = λ*q[1]\n        v[2] = λ*q[2]\n    end\n\n    function B(μ, t, q, B)\n        B[1] = μ*q[1]\n        B[2] = μ*q[2]\n    end\n\n    t₀ = 0.\n    q₀ = [1., 1.]\n    λ  = 2.\n    μ  = 1.\n\n    v_sde = (t, q, v) -> v(λ, t, q, v)\n    B_sde = (t, q, B) -> B(μ, t, q, B)\n\n    sde = SDE(v_sde, B_sde, t₀, q₀)\n\n\n\n\n\n","category":"type"}]
}
